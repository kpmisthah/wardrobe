<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Category Management</title>
  <style>
    body {
      background-color: #ecedef;
      color: #ffffff;
    }
    .container {
      margin-top: 10rem;
      margin-right: 0.01rem;
    }
    .form-container, .table-container {
      background-color: #dacfcf;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(255, 255, 255, 0.1);
      margin-bottom: 20px;
    }
    .form-container h4, .form-label {
      color: #ffffff;
    }
    .form-control {
      background-color: #2a2a2a;
      color: #ffffff;
      border: 1px solid #444;
    }
    .form-control::placeholder {
      color: #cccccc;
    }
    .form-control:focus {
      background-color: #fffbfb;
      color: #ffffff;
      border-color: #555;
      box-shadow: none;
    }
    .btn-primary {
      background-color: #ffffff;
      border-color: #565758;
    }
    .btn-primary:hover {
      background-color: #8b9095;
    }
    .btn-primary:focus {
      box-shadow: 0 0 0 0.2rem rgba(87, 88, 89, 0.5);
    }
    .table-container {
      color: #ffffff;
    }
.table {
  color: #ffffff; /* White text color */
  background-color: #ffffff; /* Dark background */
}

.table-bordered {
  border-color: #ffffff; /* Darker border for consistency */
}

.table-dark {
  background-color: #ffffff; /* Match your dark background theme */
  color: #ffffff; /* Ensure text remains white */
}

.table-striped tbody tr:nth-of-type(odd) {
  background-color: #dbdfe2; /* Slightly darker rows */
}



.table-hover tbody tr:hover {
  background-color: rgb(255, 254, 254); /* Subtle hover effect */
  color: #ffffff; /* White text on hover */
}

    .table-striped tbody tr:nth-of-type(even) {
      background-color: #f8f8f8;
    }
    .table-dark {
      background-color: #d7d2d2;
    }
    .pagination-container {
  display: flex;
  justify-content: center; 
  align-items: center;     
  padding: 20px 0;       
}

.pagination {
  display: flex;
  list-style: none;       
  padding: 0;
  margin: 0;
}

.page-item {
  margin: 0 5px;           
}

.page-link {
  display: inline-block;
  padding: 5px 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  text-decoration: none;
  color: #007bff;         
}

.page-item.active .page-link {
  background-color: #007bff; 
  color: white;
}
  </style>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.css" rel="stylesheet">
</head>
<body>
  <%- include("../../views/partials/adminPartials/headers") %>
  <div class="container">
    <div class="row">
      <!-- Form Section -->
      <div class="col-lg-4 col-md-12 form-container">
        <h4 class="mb-3">Add Category</h4>
        <form  id="loadCategory" action="/admin/addCategory" method="post">
          <div class="mb-3">
            <label for="categoryName" class="form-label"></label>
            <input type="text" class="form-control" id="categoryName" placeholder="Enter category name" name="name">
            <div id="error1" class="error-message"></div>
          </div>
          <div class="mb-3">
            <label for="categoryDescription" class="form-label"></label>
            <textarea class="form-control" id="categoryDescription" rows="3" placeholder="Enter description" name="description"></textarea>
            <div id="error2" class="error-message"></div>
          </div>
          <button type="submit" class="btn btn-primary">Add Category</button>
        </form>

      </div>
<!-- Table Section -->
<div class="col-lg-8 col-md-12 table-container">
  <h4 class="mb-3">Category List</h4>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead class="table-dark">
        <tr>
          <th>Name</th>
          <th>Description</th>
          <th>Offer Price</th>
          <th>Offer</th>
          <th>List/Unlist</th>
          <th>Status</th>
          <th>Edit</th>
        </tr>
      </thead>
      <tbody>
        <% categoryData.forEach((category) => { %>
        <tr>
          <!-- Name -->
          <td><%= category.name %></td>

          <!-- Description -->
          <td><%= category.description %></td>

          <!-- Offer Price -->
          <td>
            <% if (category.categoryOffer) { %>
              <%= category.categoryOffer %>
            <% } else { %>
              0%
            <% } %>
          </td>

          <!-- Offer Buttons -->
          <td>
            <% if (category.categoryOffer==0) { %>
            <button type="button" class="btn btn-success btn-sm" onclick="addOffer('<%= category._id %>')">Add Offer</button>
            <%}else{%>
              <button type="button" class="btn btn-danger btn-sm" onclick="removeOffer('<%= category._id %>')">Remove Offer</button>
            <%}%>
          </td>

          <!-- List and unlist -->
          <td>
            <% if (category.isListed == false) { %>
              <a href="/admin/listed?id=<%=category._id%>" class="btn btn-danger btn-sm">Listed</a>
            <% } else { %>
              <a href="/admin/unlisted?id=<%=category._id%>" class="btn btn-danger btn-sm">Unlisted</a>
            <% } %>
          </td>
           <td> 
            <% if (category.isListed ==true) { %>
              <a  class="btn btn-success btn-sm rounded-pill">Active</a>
              <% } else { %>
                <a class="btn btn-danger btn-sm rounded-pill">Inactive</a>
                <% } %>
              </td>

           <td>
              <!-- Edit Button  --> 
              <a href="/admin/edit?id=<%=category._id%>" class="btn btn-danger btn-sm">Edit</a>
           </td> 
        </tr>
        <% }) %>
      </tbody>
    </table>
  </div>

        <nav aria-label="Page navigation" class="pagination-container">
            <ul class="pagination">
              <% for (let i = 1; i <= totalpages; i++) { %>
                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                </li>
              <% } %>
            </ul>
          </nav>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>

//form validation
const name = document.getElementById('categoryName')
const description = document.getElementById('categoryDescription')
const error1 = document.getElementById('error1')
const error2 = document.getElementById('error2')
const loadCategory = document.getElementById('loadCategory')

function nameChecking(){
    const nameVal = name.value
    const namePattern = /^[a-zA-Z\s'-]+$/;
    if(nameVal.trim() == ""){
        error1.style.display = "block"
        error1.innerHTML = "please enter a valid name"
    }else if(!namePattern.test(nameVal)){
        error1.style.display = "block"
        error1.innerHTML="name can only contain alphabets"
    
    }else{
        error1.style.display = 'none'
        error1.innerHTML = ''
    }
}

function descriptionChecking(){
    const descriptionVal = description.value
    if(descriptionVal.trim()==""){
        error2.style.display = "block"
        error2.innerHTML = "please enter a description"
    }else{
        error2.style.display ="none"
        error2.innerHTML = ''
    }
}
document.addEventListener("DOMContentLoaded", () => {
    loadCategory.addEventListener('submit', async (e) => {
        e.preventDefault(); 
        
        nameChecking();  
        descriptionChecking(); 
        
     
        if (error1.innerHTML || error2.innerHTML) {
            return;  
        }
        
        // Get form values
        const name = document.getElementById('categoryName').value;
        const description = document.getElementById('categoryDescription').value;  // Get the value of description
        
        try {
            // Make the fetch request using async/await
            const response = await fetch('/admin/addCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name, description })  // Send both name and description as JSON
            });
          
            // Check if response is not OK and throw an error
            if (!response.ok) {
                const err = await response.json();
                throw new Error(err.error);  // Handle the error if the response is not OK
            }
            
            // If successful, parse the response data
            const data = await response.json();
            
            // Handle the successful response, e.g., show a success message
            console.log('Category added:', data);
            window.location.reload();
        } catch (err) {
            // Handle errors in the fetch request
            if(err.message == 'Category is already exist'){
                Swal.fire("Error", "OOPS", "Category already exist");
                console.error("error")
            }else{
                Swal.fire("Error", "OOPS","An error occur while adding category");
            }
            
        }
    });
});

//addoffer
async function addOffer(categoryId) {
  const{value:amount} = await Swal.fire({
    title:'offer in percentage',
    input:"number",
    inputLabel:"percentage",
    inputPlaceholder:"%"
  })

if(amount){
  try {
    const response = await fetch('/admin/addOffer',{
    method:"POST",
    headers:{"Content-Type":"application/json"},
    body:JSON.stringify({percentage:amount,categoryId})
  })
  const data = await response.json()
  if(response.ok && data.status === true){
    Swal.fire('offer added', 'The offer has been added',"success")
    .then(()=>{
      window.location.reload()
    })
  }else{
    Swal.fire('Failed',data.message||"Adding offer failed",'error')
  }

  } catch (error) {
    Swal.fire("Error","An error occured while adding the offer","error")
  }


}
}

//remove offer
async function removeOffer(categoryId){
  try {
    const response = await fetch('/admin/removeOffer',{
    method:"POST",
    headers:{"Content-Type":"application/json"},
    body:JSON.stringify({categoryId:categoryId})
  })
  const data = await response.json()
  if(response.ok && data.status === true){
    Swal.fire("offer removed","The offer has been removed","success")
    .then(()=>{
      window.location.reload()
    })
    
  }else{
    Swal.fire("Failed",data.message||"Remove offer failed","error")
  }
  } catch (error) {
    Swal.fire("Error","An error occured while removing the offer","error")
  }

}
  </script>
</body>
</html>