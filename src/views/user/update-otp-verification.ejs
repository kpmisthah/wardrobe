<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <link rel="stylesheet" href="css/otp.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="container">
        <h1>OTP Verification</h1>
        <p>Enter the OTP you received to <span id="email"></span></p>
        <div class="otp-input">
            <input type="number" min="0" max="9" required>
            <input type="number" min="0" max="9" required>
            <input type="number" min="0" max="9" required>
            <input type="number" min="0" max="9" required>
            <input type="number" min="0" max="9" required>
            <input type="number" min="0" max="9" required>
        </div>
        <button onclick="verifyOTP()">Verify</button>
        <div class="resend-text">
            Didn't receive the code? 
            <span class="resend-link" onclick="resendOTP()">Resend Code</span>
            <span id="timer"></span>
        </div>
    </div>

    <script>
         const inputs = document.querySelectorAll('.otp-input input');
          const timerDisplay = document.getElementById('timer');
          const resendLink = document.querySelector('.resend-link');
          const emailSpan = document.getElementById('email');
          let timeLeft = 60; // 1 minutes in seconds
          let timerId;
          let canResend = true;

          // Simulating an email for demonstration

          function startTimer() {
            canResend = false
              timerId = setInterval(() => {
                  if (timeLeft <= 0) {
                      clearInterval(timerId);
                      timerDisplay.textContent = "Code expired";
                      timerDisplay.classList.add('expired');
                      inputs.forEach(input => input.disabled = true);
                      canResend = true;
                  } else {
                      const minutes = Math.floor(timeLeft / 60);
                      const seconds = timeLeft % 60;
                      timerDisplay.textContent = `(${minutes}:${seconds.toString().padStart(2, '0')})`;
                      timeLeft--;
                  }
              }, 1000);
          }

          async function resendOTP() {
            if (!canResend) {
                Swal.fire("Error", "Please wait for the timer to expire.", "error");
                return;
            }
                    try {
                    const email = emailSpan.textContent;
                    const response = await fetch('/resend-otp', {
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email })
            });
            const result = await response.json();  
            console.log("The result is"+result)
            if (result.success) {
                 // Reset timer
                 timeLeft = 60;
                inputs.forEach(input => {
                    input.value = '';
                    input.disabled = false;
                });
                inputs[0].focus();
                
                clearInterval(timerId); 
                timerDisplay.classList.remove('expired'); 
                startTimer();
                Swal.fire("New OTP sent!", "", "success");
               
            } else {
                Swal.fire("Error", "Cannot resend code. Time has expired.", "error");
                
            }
        } catch (error) {
            console.log("TRhe error is "+error)
            Swal.fire("Error", "An error occurred. Please try again later.", "error");
           
        }
    }


       inputs.forEach((input, index) => {
       input.addEventListener('input', (e) => {
        if (e.target.value.length > 1) {
            e.target.value = e.target.value.slice(0, 1);
        }

        if (e.target.value.length === 1) {
            if (index < inputs.length - 1) {
                inputs[index + 1].focus();
            }
        }
    });

    input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && !e.target.value) {
            if (index > 0) {
                inputs[index - 1].focus();
            }
        }
        if (e.key === 'e') {
            e.preventDefault();
        }
    });
});

         async function verifyOTP() {
              const otps = Array.from(inputs).map(input => input.value).join('');
              const email = emailSpan.textContent;
              if (otps.length === 6) {
                  if (timeLeft > 0) {
                    try {
                      const response =  await fetch('/verify-otp',{
                        method:"POST",
                        headers:{"Content-Type":"application/json"},
                        body:JSON.stringify({otps,email})
                        
                    })

                    const result = await response.json()
                    if(result.success){
                        Swal.fire("Success", "OTP Verified Successfully!", "success");
                        console.log(result.redirectUrl)
                        console.log(window.location.href)
                        window.location.href = result.redirectUrl;
                        return
                    }else{
                        Swal.fire("Error", "Invalid OTP. Please try again.", "error");
                    }
                    
                    } catch (error) {
                        console.log(error+"error details")
                        Swal.fire("Error", "Something went wrong. Please try again later.", "error");
                        
                    }

                  } else {
                    Swal.fire("Error", "OTP has expired. Please request a new one.", "error");
                  }
              } else {
                Swal.fire("Warning", "Please enter a 6-digit OTP", "warning");
              }
          }

          startTimer();
    </script>
</body>
</html>