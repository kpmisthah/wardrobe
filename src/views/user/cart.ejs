<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shopping Cart</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <!-- Header -->
  <%- include('../../views/partials/userPartials/header') %>

  <!-- Breadcrumb -->
  <div class="container">
    <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg">
      <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
        Home
        <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
      </a>
      <span class="stext-109 cl4">Shopping Cart</span>
    </div>
  </div>

  <!-- Shopping Cart -->
  <form class="bg0 p-t-75 p-b-85">
    <div class="container">
      <div class="row">
        <div class="col-lg-10 col-xl-7 m-lr-auto m-b-50">
          <div class="m-l-23 m-r--33 m-lr-0-xl">
            <div class="wrap-table-shopping-cart">
              <table class="table-shopping-cart">
                <tr class="table_head">
                  <th class="column-1">Product</th>
                  <th class="column-2"></th>
                  <th class="column-3">Price</th>
                  <th class="column-4">Quantity</th>
                  <th></th>
                  <th class="column-5">Size</th>
                  <th class="column-6">Total</th>
                </tr>
                <% cart.items.forEach((product) => { %>
                <tr class="table_row">
                  <td class="column-1">
                    <div class="how-itemcart1">
                      <% if (product.product.productImage && product.product.productImage.length > 0) { %>
                      <img src="/uploads/product-images/<%= product.product.productImage[0] %>" alt="IMG" />
                      <% } else { %>
                      <img src="/uploads/default-image.jpg" alt="No Image Available" />
                      <% } %>
                    </div>
                  </td>
                  <td class="column-2"><%= product.name %></td>
                  <td class="column-3"><%= product.price %></td>
                  <td class="column-4"><%= product.quantity %></td>
                  <td>
                    <div class="wrap-num-product flex-w m-r-20 m-tb-10">
                      <button type="button" class="btn-num-product-down cl8 hov-btn3 trans-04 flex-c-m" data-product-id="<%= product.product._id %>" data-size="<%= product.size %>">
                        <i class="fs-16 zmdi zmdi-minus"></i>
                      </button>
                      <input class="mtext-104 cl3 txt-center num-product" type="number" name="num-product" value="<%= product.quantity %>" readonly />
                      <button type="button" class="btn-num-product-up cl8 hov-btn3 trans-04 flex-c-m" data-product-id="<%= product.product._id %>" data-size="<%= product.size %>" data-quantity="<%= product.quantity %>">
                        <i class="fs-16 zmdi zmdi-plus"></i>
                      </button>
                    </div>
                  </td>
                  <td class="column-5"><%= product.size %></td>
                  <td class="column-6"><%= product.totalPrice %></td>
                  <td class="column-7">
                    <button onclick="removeFromCart('<%= product._id %>', event)" class="flex-c-m cl2 size-50 bg8 bor13 hov-btn3 p-all-10 trans-04 pointer m-tb-5" style="border: none; background: none">
                      <i class="zmdi zmdi-delete" style="color: #e74c3c; font-size: 20px"></i>
                    </button>
                  </td>
                </tr>
                <% }) %>
              </table>
            </div>
          </div>
        </div>

        <!-- Cart Totals -->
        <div class="col-sm-10 col-lg-7 col-xl-5 m-lr-auto m-b-50">
          <div class="bor10 p-lr-40 p-t-30 p-b-40 m-l-63 m-r-40 m-lr-0-xl p-lr-15-sm">
            <h4 class="mtext-109 cl2 p-b-30">Cart Totals</h4>
            <div class="flex-w flex-t bor12 p-b-13">
              <div class="size-208">
                <span class="stext-110 cl2">Subtotal:</span>
              </div>
              <div class="size-209">
                <span class="mtext-110 cl2">₹<%= cart.bill %></span>
              </div>
            </div>

            <div class="flex-w flex-t p-t-27 p-b-33">
              <div class="size-208">
                <span class="mtext-101 cl2">Total:</span>
              </div>
              <div class="size-209 p-t-1">
                <span class="mtext-110 cl2">₹<%= cart.bill %></span>
              </div>
            </div>

            <button type="button" class="flex-c-m stext-101 cl0 size-116 bg3 bor14 hov-btn3 p-lr-15 trans-04 pointer" onclick="checkCartBeforeProceed()">
              Proceed to Checkout
            </button>
          </div>
        </div>
      </div>
    </div>
  </form>

  <!-- Footer -->
  <%- include('../../views/partials/userPartials/footer') %>

<script>
  
  async function checkCartBeforeProceed() {
    const cartRows = document.querySelectorAll('.table_row');
    const cartItems = Array.from(cartRows).map(row => {
        const incrementButton = row.querySelector('.btn-num-product-up');
        
        return {
            product: {
                _id: incrementButton.getAttribute('data-product-id')
            },
            name: row.querySelector('.column-2').textContent,
            quantity: parseInt(row.querySelector('.num-product').value),
            size: incrementButton.getAttribute('data-size'),
            totalPrice: parseFloat(row.querySelector('.column-6').textContent.replace('₹', ''))
        };
    });
    
    if (cartItems.length === 0) {
        await Swal.fire({
            icon: 'warning',
            title: 'Oops...',
            text: 'Your cart is empty. Add items to cart.',
            confirmButtonText: 'Go to shop'
        });
        window.location.href = "/shop";
        return;
    }

    try {
        const response = await fetch('/validate-cart-stock', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ cartItems })
        });

        const result = await response.json();

        if (response.ok) {
            if (result.valid) {
                window.location.href = "/checkout";
            } else {
                let message = 'The following items have insufficient stock:\n\n';
                result.invalidItems.forEach(item => {
                    message += `${item.name} (Size: ${item.size})\n`;
                    message += `Requested: ${item.requestedQty}, Available: ${item.availableQty}\n\n`;
                });

                await Swal.fire({
                    icon: 'error',
                    title: 'Stock Changed',
                    text: message,
                    confirmButtonText: 'Ok'
                });
            }
        } else {
            throw new Error(result.message || 'Failed to validate cart');
        }
    } catch (error) {
        console.error('Error validating cart:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to validate cart. Please try again.',
        });
    }
}
  
  
    // Function to remove items from the cart
    async function removeFromCart(productId, event) {
      event.preventDefault();
      try {
        const result = await Swal.fire({
          title: "Are you sure?",
          text: "Do you want to remove this item from your cart?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#d33",
          cancelButtonColor: "#3085d6",
          confirmButtonText: "Yes, remove it!",
          cancelButtonText: "Cancel",
        });

        if (result.isConfirmed) {
          const response = await fetch(`/cart/remove/${productId}`, {
            method: "DELETE",
          });

          const data = await response.json();

          if (data.success) {
            await Swal.fire({
              icon: "success",
              title: "Item Removed",
              text: "The item was successfully removed from your cart!",
            });

            window.location.reload();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Failed to Remove Item",
              text: "There was an issue removing the item from the cart.",
            });
          }
        }
      } catch (error) {
        console.error("Error:", error);
        await Swal.fire({
          icon: "error",
          title: "Error",
          text: "An error occurred while removing the item.",
        });
      }
    }



document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.btn-num-product-up').forEach(button => {
    button.addEventListener('click', function(event) {
      const productId = this.dataset.productId;
      const size = this.dataset.size;
      const quantity = this.dataset.quantity;
      increment_quantity(productId, size, event);
    });
  });

  document.querySelectorAll('.btn-num-product-down').forEach(button => {
    button.addEventListener('click', function(event) {
      const productId = this.dataset.productId;
      const size = this.dataset.size;
      decrement_quantity(productId, size, event);
    });
  });
});

async function increment_quantity(productId, size, event) {
    try {
        const currentRow = event.target.closest(".table_row");
        const quantityInput = currentRow.querySelector(".num-product");
        const currentQuantity = parseInt(quantityInput.value);
        const incrementButton = currentRow.querySelector('.btn-num-product-up');

        const response = await fetch("/increment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ productId, size })
        });

        const data = await response.json();

        if (response.ok) {
            // Update cart details
            const totalCell = currentRow.querySelector(".column-6");
            const quantityCell = currentRow.querySelector(".column-4");
            
            quantityInput.value = data.newQuantity;
            quantityCell.textContent = data.newQuantity;
            totalCell.textContent = `₹${data.newTotalPrice.toFixed(2)}`;
            updateCartTotals(data.newCartTotal);
            incrementButton.dataset.quantity = data.newQuantity;
        } else {
            // If increment fails due to stock limit
            if (data.message.includes("Not enough stock")) {
                // Revert to maximum available stock
                quantityInput.value = data.stockLeft;
                incrementButton.dataset.quantity = data.stockLeft;
                
                Swal.fire({
                    icon: "error", 
                    title: "Stock Limit Reached",
                    text: data.message
                });
            } else {
                // Handle other errors
                Swal.fire({
                    icon: "error", 
                    title: "Error",
                    text: data.message
                });
            }
        }
    } catch (error) {
        console.error("Error incrementing quantity:", error);
        Swal.fire({
            icon: "error", 
            title: "Error", 
            text: "Failed to increment quantity"
        });
    }
}

async function decrement_quantity(productId, size, event) {
  try {
    const response = await fetch("/decrement", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ productId, size }),
    });

    const data = await response.json();
    if (response.ok) {
      const currentRow = event.target.closest(".table_row");
      const quantityInput = currentRow.querySelector(".num-product");
      const totalCell = currentRow.querySelector(".column-6");
      const quantityCell = currentRow.querySelector(".column-4");

      quantityInput.value = data.newQuantity;
      quantityCell.textContent = data.newQuantity; 
      totalCell.textContent = `₹${data.newTotalPrice.toFixed(2)}`;
      updateCartTotals(data.newCartTotal);

      const incrementButton = currentRow.querySelector('.btn-num-product-up');
      incrementButton.dataset.quantity = data.newQuantity;
    // } else {
    //   Swal.fire({ icon: "error",title: "Error", text: "cannot" });
    }
  } catch (error) {
    console.error("Error decrementing quantity:", error);
    Swal.fire({ icon: "error", title: "Error", text: "Failed to decrement quantity" });
  }
}

function updateCartTotals(newTotal) {
  const subtotalElement = document.querySelector(".size-209 .mtext-110.cl2");
  const totalElement = document.querySelector(".size-209.p-t-1 .mtext-110.cl2");
  
  subtotalElement.textContent = `₹${newTotal}`;
  totalElement.textContent = `₹${newTotal}`;
}
</script>
</body>
</html>

